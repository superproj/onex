//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Copyright 2022 Lingfei Kong <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/superproj/onex.

// Code generated by conversion-gen. DO NOT EDIT.

package v1beta1

import (
	config "github.com/superproj/onex/pkg/config"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddConversionFunc((*config.MySQLConfiguration)(nil), (*MySQLConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_config_MySQLConfiguration_To_v1beta1_MySQLConfiguration(a.(*config.MySQLConfiguration), b.(*MySQLConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*config.RedisConfiguration)(nil), (*RedisConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_config_RedisConfiguration_To_v1beta1_RedisConfiguration(a.(*config.RedisConfiguration), b.(*RedisConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*MySQLConfiguration)(nil), (*config.MySQLConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_MySQLConfiguration_To_config_MySQLConfiguration(a.(*MySQLConfiguration), b.(*config.MySQLConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*RedisConfiguration)(nil), (*config.RedisConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_RedisConfiguration_To_config_RedisConfiguration(a.(*RedisConfiguration), b.(*config.RedisConfiguration), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1beta1_MySQLConfiguration_To_config_MySQLConfiguration(in *MySQLConfiguration, out *config.MySQLConfiguration, s conversion.Scope) error {
	out.Host = in.Host
	out.Username = in.Username
	out.Password = in.Password
	out.Database = in.Database
	out.MaxIdleConnections = in.MaxIdleConnections
	out.MaxOpenConnections = in.MaxOpenConnections
	out.MaxConnectionLifeTime = in.MaxConnectionLifeTime
	return nil
}

func autoConvert_config_MySQLConfiguration_To_v1beta1_MySQLConfiguration(in *config.MySQLConfiguration, out *MySQLConfiguration, s conversion.Scope) error {
	out.Host = in.Host
	out.Username = in.Username
	out.Password = in.Password
	out.Database = in.Database
	out.MaxIdleConnections = in.MaxIdleConnections
	out.MaxOpenConnections = in.MaxOpenConnections
	out.MaxConnectionLifeTime = in.MaxConnectionLifeTime
	return nil
}

func autoConvert_v1beta1_RedisConfiguration_To_config_RedisConfiguration(in *RedisConfiguration, out *config.RedisConfiguration, s conversion.Scope) error {
	out.Addr = in.Addr
	out.Username = in.Username
	out.Password = in.Password
	out.Database = in.Database
	out.MaxRetries = in.MaxRetries
	out.Timeout = in.Timeout
	return nil
}

func autoConvert_config_RedisConfiguration_To_v1beta1_RedisConfiguration(in *config.RedisConfiguration, out *RedisConfiguration, s conversion.Scope) error {
	out.Addr = in.Addr
	out.Username = in.Username
	out.Password = in.Password
	out.Database = in.Database
	out.MaxRetries = in.MaxRetries
	out.Timeout = in.Timeout
	return nil
}
