// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.4
// source: gateway/v1/gateway.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1beta1 "github.com/superproj/onex/pkg/apis/apps/v1beta1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGatewayCreateModelCompare = "/gateway.v1.Gateway/CreateModelCompare"
const OperationGatewayDeleteModelCompare = "/gateway.v1.Gateway/DeleteModelCompare"
const OperationGatewayGetModelCompare = "/gateway.v1.Gateway/GetModelCompare"
const OperationGatewayListModelCompare = "/gateway.v1.Gateway/ListModelCompare"
const OperationGatewayUpdateModelCompare = "/gateway.v1.Gateway/UpdateModelCompare"

type GatewayHTTPServer interface {
	// CreateModelCompare CreateModelCompare
	CreateModelCompare(context.Context, *v1beta1.ModelCompare) (*emptypb.Empty, error)
	// DeleteModelCompare DeleteModelCompare
	DeleteModelCompare(context.Context, *DeleteModelCompareRequest) (*emptypb.Empty, error)
	// GetModelCompare GetModelCompare
	GetModelCompare(context.Context, *GetModelCompareRequest) (*v1beta1.ModelCompare, error)
	// ListModelCompare ListModelCompare
	ListModelCompare(context.Context, *ListModelCompareRequest) (*ListModelCompareResponse, error)
	// UpdateModelCompare UpdateModelCompare
	UpdateModelCompare(context.Context, *v1beta1.ModelCompare) (*emptypb.Empty, error)
}

func RegisterGatewayHTTPServer(s *http.Server, srv GatewayHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/modelcompares", _Gateway_CreateModelCompare0_HTTP_Handler(srv))
	r.GET("/v1/modelcompares", _Gateway_ListModelCompare0_HTTP_Handler(srv))
	r.GET("/v1/modelcompares/{name}", _Gateway_GetModelCompare0_HTTP_Handler(srv))
	r.PUT("/v1/modelcompares", _Gateway_UpdateModelCompare0_HTTP_Handler(srv))
	r.DELETE("/v1/modelcompares/{name}", _Gateway_DeleteModelCompare0_HTTP_Handler(srv))
}

func _Gateway_CreateModelCompare0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1beta1.ModelCompare
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayCreateModelCompare)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateModelCompare(ctx, req.(*v1beta1.ModelCompare))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Gateway_ListModelCompare0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListModelCompareRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayListModelCompare)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListModelCompare(ctx, req.(*ListModelCompareRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListModelCompareResponse)
		return ctx.Result(200, reply)
	}
}

func _Gateway_GetModelCompare0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetModelCompareRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayGetModelCompare)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetModelCompare(ctx, req.(*GetModelCompareRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1beta1.ModelCompare)
		return ctx.Result(200, reply)
	}
}

func _Gateway_UpdateModelCompare0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1beta1.ModelCompare
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayUpdateModelCompare)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateModelCompare(ctx, req.(*v1beta1.ModelCompare))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Gateway_DeleteModelCompare0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteModelCompareRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayDeleteModelCompare)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteModelCompare(ctx, req.(*DeleteModelCompareRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type GatewayHTTPClient interface {
	CreateModelCompare(ctx context.Context, req *v1beta1.ModelCompare, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteModelCompare(ctx context.Context, req *DeleteModelCompareRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetModelCompare(ctx context.Context, req *GetModelCompareRequest, opts ...http.CallOption) (rsp *v1beta1.ModelCompare, err error)
	ListModelCompare(ctx context.Context, req *ListModelCompareRequest, opts ...http.CallOption) (rsp *ListModelCompareResponse, err error)
	UpdateModelCompare(ctx context.Context, req *v1beta1.ModelCompare, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type GatewayHTTPClientImpl struct {
	cc *http.Client
}

func NewGatewayHTTPClient(client *http.Client) GatewayHTTPClient {
	return &GatewayHTTPClientImpl{client}
}

func (c *GatewayHTTPClientImpl) CreateModelCompare(ctx context.Context, in *v1beta1.ModelCompare, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/modelcompares"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayCreateModelCompare))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GatewayHTTPClientImpl) DeleteModelCompare(ctx context.Context, in *DeleteModelCompareRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/modelcompares/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGatewayDeleteModelCompare))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GatewayHTTPClientImpl) GetModelCompare(ctx context.Context, in *GetModelCompareRequest, opts ...http.CallOption) (*v1beta1.ModelCompare, error) {
	var out v1beta1.ModelCompare
	pattern := "/v1/modelcompares/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGatewayGetModelCompare))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GatewayHTTPClientImpl) ListModelCompare(ctx context.Context, in *ListModelCompareRequest, opts ...http.CallOption) (*ListModelCompareResponse, error) {
	var out ListModelCompareResponse
	pattern := "/v1/modelcompares"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGatewayListModelCompare))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GatewayHTTPClientImpl) UpdateModelCompare(ctx context.Context, in *v1beta1.ModelCompare, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/modelcompares"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayUpdateModelCompare))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
