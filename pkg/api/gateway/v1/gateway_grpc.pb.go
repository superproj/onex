// Copyright 2022 Lingfei Kong <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/superproj/onex.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: gateway/v1/gateway.proto

package v1

import (
	context "context"
	v1beta1 "github.com/superproj/onex/pkg/apis/apps/v1beta1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_CreateModelCompare_FullMethodName = "/gateway.v1.Gateway/CreateModelCompare"
	Gateway_ListModelCompare_FullMethodName   = "/gateway.v1.Gateway/ListModelCompare"
	Gateway_GetModelCompare_FullMethodName    = "/gateway.v1.Gateway/GetModelCompare"
	Gateway_UpdateModelCompare_FullMethodName = "/gateway.v1.Gateway/UpdateModelCompare"
	Gateway_DeleteModelCompare_FullMethodName = "/gateway.v1.Gateway/DeleteModelCompare"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	// CreateModelCompare
	CreateModelCompare(ctx context.Context, in *v1beta1.ModelCompare, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListModelCompare
	ListModelCompare(ctx context.Context, in *ListModelCompareRequest, opts ...grpc.CallOption) (*ListModelCompareResponse, error)
	// GetModelCompare
	GetModelCompare(ctx context.Context, in *GetModelCompareRequest, opts ...grpc.CallOption) (*v1beta1.ModelCompare, error)
	// UpdateModelCompare
	UpdateModelCompare(ctx context.Context, in *v1beta1.ModelCompare, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteModelCompare
	DeleteModelCompare(ctx context.Context, in *DeleteModelCompareRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateModelCompare(ctx context.Context, in *v1beta1.ModelCompare, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gateway_CreateModelCompare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ListModelCompare(ctx context.Context, in *ListModelCompareRequest, opts ...grpc.CallOption) (*ListModelCompareResponse, error) {
	out := new(ListModelCompareResponse)
	err := c.cc.Invoke(ctx, Gateway_ListModelCompare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetModelCompare(ctx context.Context, in *GetModelCompareRequest, opts ...grpc.CallOption) (*v1beta1.ModelCompare, error) {
	out := new(v1beta1.ModelCompare)
	err := c.cc.Invoke(ctx, Gateway_GetModelCompare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateModelCompare(ctx context.Context, in *v1beta1.ModelCompare, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gateway_UpdateModelCompare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteModelCompare(ctx context.Context, in *DeleteModelCompareRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gateway_DeleteModelCompare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	// CreateModelCompare
	CreateModelCompare(context.Context, *v1beta1.ModelCompare) (*emptypb.Empty, error)
	// ListModelCompare
	ListModelCompare(context.Context, *ListModelCompareRequest) (*ListModelCompareResponse, error)
	// GetModelCompare
	GetModelCompare(context.Context, *GetModelCompareRequest) (*v1beta1.ModelCompare, error)
	// UpdateModelCompare
	UpdateModelCompare(context.Context, *v1beta1.ModelCompare) (*emptypb.Empty, error)
	// DeleteModelCompare
	DeleteModelCompare(context.Context, *DeleteModelCompareRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateModelCompare(context.Context, *v1beta1.ModelCompare) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModelCompare not implemented")
}
func (UnimplementedGatewayServer) ListModelCompare(context.Context, *ListModelCompareRequest) (*ListModelCompareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelCompare not implemented")
}
func (UnimplementedGatewayServer) GetModelCompare(context.Context, *GetModelCompareRequest) (*v1beta1.ModelCompare, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelCompare not implemented")
}
func (UnimplementedGatewayServer) UpdateModelCompare(context.Context, *v1beta1.ModelCompare) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModelCompare not implemented")
}
func (UnimplementedGatewayServer) DeleteModelCompare(context.Context, *DeleteModelCompareRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelCompare not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateModelCompare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta1.ModelCompare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateModelCompare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateModelCompare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateModelCompare(ctx, req.(*v1beta1.ModelCompare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ListModelCompare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelCompareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ListModelCompare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_ListModelCompare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ListModelCompare(ctx, req.(*ListModelCompareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetModelCompare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelCompareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetModelCompare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetModelCompare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetModelCompare(ctx, req.(*GetModelCompareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateModelCompare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta1.ModelCompare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateModelCompare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateModelCompare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateModelCompare(ctx, req.(*v1beta1.ModelCompare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteModelCompare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelCompareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteModelCompare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteModelCompare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteModelCompare(ctx, req.(*DeleteModelCompareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateModelCompare",
			Handler:    _Gateway_CreateModelCompare_Handler,
		},
		{
			MethodName: "ListModelCompare",
			Handler:    _Gateway_ListModelCompare_Handler,
		},
		{
			MethodName: "GetModelCompare",
			Handler:    _Gateway_GetModelCompare_Handler,
		},
		{
			MethodName: "UpdateModelCompare",
			Handler:    _Gateway_UpdateModelCompare_Handler,
		},
		{
			MethodName: "DeleteModelCompare",
			Handler:    _Gateway_DeleteModelCompare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/v1/gateway.proto",
}
