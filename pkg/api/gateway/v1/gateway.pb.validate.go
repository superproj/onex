// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gateway/v1/gateway.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ModelCompare with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelCompare) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelCompare with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelCompareMultiError, or
// nil if none found.
func (m *ModelCompare) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelCompare) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompareID

	// no validation rules for CompareName

	// no validation rules for SceneID

	// no validation rules for Creator

	// no validation rules for SampleID

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelCompareValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelCompareValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelCompareValidationError{
				field:  "StartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelCompareValidationError{
					field:  "EndedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelCompareValidationError{
					field:  "EndedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelCompareValidationError{
				field:  "EndedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelCompareValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelCompareValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelCompareValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelCompareValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelCompareValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelCompareValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModelCompareMultiError(errors)
	}

	return nil
}

// ModelCompareMultiError is an error wrapping multiple validation errors
// returned by ModelCompare.ValidateAll() if the designated constraints aren't met.
type ModelCompareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelCompareMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelCompareMultiError) AllErrors() []error { return m }

// ModelCompareValidationError is the validation error returned by
// ModelCompare.Validate if the designated constraints aren't met.
type ModelCompareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelCompareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelCompareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelCompareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelCompareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelCompareValidationError) ErrorName() string { return "ModelCompareValidationError" }

// Error satisfies the builtin error interface
func (e ModelCompareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelCompare.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelCompareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelCompareValidationError{}

// Validate checks the field values on CreateModelCompareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateModelCompareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateModelCompareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateModelCompareRequestMultiError, or nil if none found.
func (m *CreateModelCompareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateModelCompareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompareName

	// no validation rules for Creator

	// no validation rules for SampleID

	if len(errors) > 0 {
		return CreateModelCompareRequestMultiError(errors)
	}

	return nil
}

// CreateModelCompareRequestMultiError is an error wrapping multiple validation
// errors returned by CreateModelCompareRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateModelCompareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateModelCompareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateModelCompareRequestMultiError) AllErrors() []error { return m }

// CreateModelCompareRequestValidationError is the validation error returned by
// CreateModelCompareRequest.Validate if the designated constraints aren't met.
type CreateModelCompareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateModelCompareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateModelCompareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateModelCompareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateModelCompareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateModelCompareRequestValidationError) ErrorName() string {
	return "CreateModelCompareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateModelCompareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateModelCompareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateModelCompareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateModelCompareRequestValidationError{}

// Validate checks the field values on ListModelCompareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListModelCompareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModelCompareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModelCompareRequestMultiError, or nil if none found.
func (m *ListModelCompareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModelCompareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListModelCompareRequestMultiError(errors)
	}

	return nil
}

// ListModelCompareRequestMultiError is an error wrapping multiple validation
// errors returned by ListModelCompareRequest.ValidateAll() if the designated
// constraints aren't met.
type ListModelCompareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModelCompareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModelCompareRequestMultiError) AllErrors() []error { return m }

// ListModelCompareRequestValidationError is the validation error returned by
// ListModelCompareRequest.Validate if the designated constraints aren't met.
type ListModelCompareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModelCompareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModelCompareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModelCompareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModelCompareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModelCompareRequestValidationError) ErrorName() string {
	return "ListModelCompareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListModelCompareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModelCompareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModelCompareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModelCompareRequestValidationError{}

// Validate checks the field values on ListModelCompareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListModelCompareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModelCompareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModelCompareResponseMultiError, or nil if none found.
func (m *ListModelCompareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModelCompareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	for idx, item := range m.GetCompares() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListModelCompareResponseValidationError{
						field:  fmt.Sprintf("Compares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListModelCompareResponseValidationError{
						field:  fmt.Sprintf("Compares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListModelCompareResponseValidationError{
					field:  fmt.Sprintf("Compares[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListModelCompareResponseMultiError(errors)
	}

	return nil
}

// ListModelCompareResponseMultiError is an error wrapping multiple validation
// errors returned by ListModelCompareResponse.ValidateAll() if the designated
// constraints aren't met.
type ListModelCompareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModelCompareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModelCompareResponseMultiError) AllErrors() []error { return m }

// ListModelCompareResponseValidationError is the validation error returned by
// ListModelCompareResponse.Validate if the designated constraints aren't met.
type ListModelCompareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModelCompareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModelCompareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModelCompareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModelCompareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModelCompareResponseValidationError) ErrorName() string {
	return "ListModelCompareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListModelCompareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModelCompareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModelCompareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModelCompareResponseValidationError{}

// Validate checks the field values on GetModelCompareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetModelCompareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModelCompareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModelCompareRequestMultiError, or nil if none found.
func (m *GetModelCompareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModelCompareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetModelCompareRequestMultiError(errors)
	}

	return nil
}

// GetModelCompareRequestMultiError is an error wrapping multiple validation
// errors returned by GetModelCompareRequest.ValidateAll() if the designated
// constraints aren't met.
type GetModelCompareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModelCompareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModelCompareRequestMultiError) AllErrors() []error { return m }

// GetModelCompareRequestValidationError is the validation error returned by
// GetModelCompareRequest.Validate if the designated constraints aren't met.
type GetModelCompareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelCompareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelCompareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelCompareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelCompareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelCompareRequestValidationError) ErrorName() string {
	return "GetModelCompareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetModelCompareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelCompareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelCompareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelCompareRequestValidationError{}

// Validate checks the field values on UpdateModelCompareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateModelCompareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateModelCompareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateModelCompareRequestMultiError, or nil if none found.
func (m *UpdateModelCompareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateModelCompareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.SampleID != nil {
		// no validation rules for SampleID
	}

	if len(errors) > 0 {
		return UpdateModelCompareRequestMultiError(errors)
	}

	return nil
}

// UpdateModelCompareRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateModelCompareRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateModelCompareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateModelCompareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateModelCompareRequestMultiError) AllErrors() []error { return m }

// UpdateModelCompareRequestValidationError is the validation error returned by
// UpdateModelCompareRequest.Validate if the designated constraints aren't met.
type UpdateModelCompareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateModelCompareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateModelCompareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateModelCompareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateModelCompareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateModelCompareRequestValidationError) ErrorName() string {
	return "UpdateModelCompareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateModelCompareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateModelCompareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateModelCompareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateModelCompareRequestValidationError{}

// Validate checks the field values on DeleteModelCompareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteModelCompareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteModelCompareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteModelCompareRequestMultiError, or nil if none found.
func (m *DeleteModelCompareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteModelCompareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteModelCompareRequestMultiError(errors)
	}

	return nil
}

// DeleteModelCompareRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteModelCompareRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteModelCompareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteModelCompareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteModelCompareRequestMultiError) AllErrors() []error { return m }

// DeleteModelCompareRequestValidationError is the validation error returned by
// DeleteModelCompareRequest.Validate if the designated constraints aren't met.
type DeleteModelCompareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteModelCompareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteModelCompareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteModelCompareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteModelCompareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteModelCompareRequestValidationError) ErrorName() string {
	return "DeleteModelCompareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteModelCompareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteModelCompareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteModelCompareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteModelCompareRequestValidationError{}
