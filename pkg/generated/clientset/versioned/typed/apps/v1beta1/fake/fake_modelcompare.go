// Copyright 2022 Lingfei Kong <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/superproj/onex.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1beta1 "github.com/superproj/onex/pkg/apis/apps/v1beta1"
	appsv1beta1 "github.com/superproj/onex/pkg/generated/applyconfigurations/apps/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeModelCompares implements ModelCompareInterface
type FakeModelCompares struct {
	Fake *FakeAppsV1beta1
	ns   string
}

var modelcomparesResource = v1beta1.SchemeGroupVersion.WithResource("modelcompares")

var modelcomparesKind = v1beta1.SchemeGroupVersion.WithKind("ModelCompare")

// Get takes name of the modelCompare, and returns the corresponding modelCompare object, and an error if there is any.
func (c *FakeModelCompares) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.ModelCompare, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(modelcomparesResource, c.ns, name), &v1beta1.ModelCompare{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ModelCompare), err
}

// List takes label and field selectors, and returns the list of ModelCompares that match those selectors.
func (c *FakeModelCompares) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.ModelCompareList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(modelcomparesResource, modelcomparesKind, c.ns, opts), &v1beta1.ModelCompareList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.ModelCompareList{ListMeta: obj.(*v1beta1.ModelCompareList).ListMeta}
	for _, item := range obj.(*v1beta1.ModelCompareList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested modelCompares.
func (c *FakeModelCompares) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(modelcomparesResource, c.ns, opts))

}

// Create takes the representation of a modelCompare and creates it.  Returns the server's representation of the modelCompare, and an error, if there is any.
func (c *FakeModelCompares) Create(ctx context.Context, modelCompare *v1beta1.ModelCompare, opts v1.CreateOptions) (result *v1beta1.ModelCompare, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(modelcomparesResource, c.ns, modelCompare), &v1beta1.ModelCompare{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ModelCompare), err
}

// Update takes the representation of a modelCompare and updates it. Returns the server's representation of the modelCompare, and an error, if there is any.
func (c *FakeModelCompares) Update(ctx context.Context, modelCompare *v1beta1.ModelCompare, opts v1.UpdateOptions) (result *v1beta1.ModelCompare, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(modelcomparesResource, c.ns, modelCompare), &v1beta1.ModelCompare{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ModelCompare), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeModelCompares) UpdateStatus(ctx context.Context, modelCompare *v1beta1.ModelCompare, opts v1.UpdateOptions) (*v1beta1.ModelCompare, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(modelcomparesResource, "status", c.ns, modelCompare), &v1beta1.ModelCompare{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ModelCompare), err
}

// Delete takes name of the modelCompare and deletes it. Returns an error if one occurs.
func (c *FakeModelCompares) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(modelcomparesResource, c.ns, name, opts), &v1beta1.ModelCompare{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeModelCompares) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(modelcomparesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.ModelCompareList{})
	return err
}

// Patch applies the patch and returns the patched modelCompare.
func (c *FakeModelCompares) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.ModelCompare, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(modelcomparesResource, c.ns, name, pt, data, subresources...), &v1beta1.ModelCompare{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ModelCompare), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied modelCompare.
func (c *FakeModelCompares) Apply(ctx context.Context, modelCompare *appsv1beta1.ModelCompareApplyConfiguration, opts v1.ApplyOptions) (result *v1beta1.ModelCompare, err error) {
	if modelCompare == nil {
		return nil, fmt.Errorf("modelCompare provided to Apply must not be nil")
	}
	data, err := json.Marshal(modelCompare)
	if err != nil {
		return nil, err
	}
	name := modelCompare.Name
	if name == nil {
		return nil, fmt.Errorf("modelCompare.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(modelcomparesResource, c.ns, *name, types.ApplyPatchType, data), &v1beta1.ModelCompare{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ModelCompare), err
}

// ApplyStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
func (c *FakeModelCompares) ApplyStatus(ctx context.Context, modelCompare *appsv1beta1.ModelCompareApplyConfiguration, opts v1.ApplyOptions) (result *v1beta1.ModelCompare, err error) {
	if modelCompare == nil {
		return nil, fmt.Errorf("modelCompare provided to Apply must not be nil")
	}
	data, err := json.Marshal(modelCompare)
	if err != nil {
		return nil, err
	}
	name := modelCompare.Name
	if name == nil {
		return nil, fmt.Errorf("modelCompare.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(modelcomparesResource, c.ns, *name, types.ApplyPatchType, data, "status"), &v1beta1.ModelCompare{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ModelCompare), err
}
