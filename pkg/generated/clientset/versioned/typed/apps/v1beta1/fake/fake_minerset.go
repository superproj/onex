// Copyright 2022 Lingfei Kong <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/superproj/onex.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1beta1 "github.com/superproj/onex/pkg/apis/apps/v1beta1"
	appsv1beta1 "github.com/superproj/onex/pkg/generated/applyconfigurations/apps/v1beta1"
	applyconfigurationsautoscalingv1 "github.com/superproj/onex/pkg/generated/applyconfigurations/autoscaling/v1"
	autoscalingv1 "k8s.io/api/autoscaling/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeMinerSets implements MinerSetInterface
type FakeMinerSets struct {
	Fake *FakeAppsV1beta1
	ns   string
}

var minersetsResource = v1beta1.SchemeGroupVersion.WithResource("minersets")

var minersetsKind = v1beta1.SchemeGroupVersion.WithKind("MinerSet")

// Get takes name of the minerSet, and returns the corresponding minerSet object, and an error if there is any.
func (c *FakeMinerSets) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.MinerSet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(minersetsResource, c.ns, name), &v1beta1.MinerSet{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.MinerSet), err
}

// List takes label and field selectors, and returns the list of MinerSets that match those selectors.
func (c *FakeMinerSets) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.MinerSetList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(minersetsResource, minersetsKind, c.ns, opts), &v1beta1.MinerSetList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.MinerSetList{ListMeta: obj.(*v1beta1.MinerSetList).ListMeta}
	for _, item := range obj.(*v1beta1.MinerSetList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested minerSets.
func (c *FakeMinerSets) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(minersetsResource, c.ns, opts))

}

// Create takes the representation of a minerSet and creates it.  Returns the server's representation of the minerSet, and an error, if there is any.
func (c *FakeMinerSets) Create(ctx context.Context, minerSet *v1beta1.MinerSet, opts v1.CreateOptions) (result *v1beta1.MinerSet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(minersetsResource, c.ns, minerSet), &v1beta1.MinerSet{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.MinerSet), err
}

// Update takes the representation of a minerSet and updates it. Returns the server's representation of the minerSet, and an error, if there is any.
func (c *FakeMinerSets) Update(ctx context.Context, minerSet *v1beta1.MinerSet, opts v1.UpdateOptions) (result *v1beta1.MinerSet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(minersetsResource, c.ns, minerSet), &v1beta1.MinerSet{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.MinerSet), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeMinerSets) UpdateStatus(ctx context.Context, minerSet *v1beta1.MinerSet, opts v1.UpdateOptions) (*v1beta1.MinerSet, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(minersetsResource, "status", c.ns, minerSet), &v1beta1.MinerSet{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.MinerSet), err
}

// Delete takes name of the minerSet and deletes it. Returns an error if one occurs.
func (c *FakeMinerSets) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(minersetsResource, c.ns, name, opts), &v1beta1.MinerSet{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeMinerSets) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(minersetsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.MinerSetList{})
	return err
}

// Patch applies the patch and returns the patched minerSet.
func (c *FakeMinerSets) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.MinerSet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(minersetsResource, c.ns, name, pt, data, subresources...), &v1beta1.MinerSet{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.MinerSet), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied minerSet.
func (c *FakeMinerSets) Apply(ctx context.Context, minerSet *appsv1beta1.MinerSetApplyConfiguration, opts v1.ApplyOptions) (result *v1beta1.MinerSet, err error) {
	if minerSet == nil {
		return nil, fmt.Errorf("minerSet provided to Apply must not be nil")
	}
	data, err := json.Marshal(minerSet)
	if err != nil {
		return nil, err
	}
	name := minerSet.Name
	if name == nil {
		return nil, fmt.Errorf("minerSet.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(minersetsResource, c.ns, *name, types.ApplyPatchType, data), &v1beta1.MinerSet{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.MinerSet), err
}

// ApplyStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
func (c *FakeMinerSets) ApplyStatus(ctx context.Context, minerSet *appsv1beta1.MinerSetApplyConfiguration, opts v1.ApplyOptions) (result *v1beta1.MinerSet, err error) {
	if minerSet == nil {
		return nil, fmt.Errorf("minerSet provided to Apply must not be nil")
	}
	data, err := json.Marshal(minerSet)
	if err != nil {
		return nil, err
	}
	name := minerSet.Name
	if name == nil {
		return nil, fmt.Errorf("minerSet.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(minersetsResource, c.ns, *name, types.ApplyPatchType, data, "status"), &v1beta1.MinerSet{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.MinerSet), err
}

// GetScale takes name of the minerSet, and returns the corresponding scale object, and an error if there is any.
func (c *FakeMinerSets) GetScale(ctx context.Context, minerSetName string, options v1.GetOptions) (result *autoscalingv1.Scale, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetSubresourceAction(minersetsResource, c.ns, "scale", minerSetName), &autoscalingv1.Scale{})

	if obj == nil {
		return nil, err
	}
	return obj.(*autoscalingv1.Scale), err
}

// UpdateScale takes the representation of a scale and updates it. Returns the server's representation of the scale, and an error, if there is any.
func (c *FakeMinerSets) UpdateScale(ctx context.Context, minerSetName string, scale *autoscalingv1.Scale, opts v1.UpdateOptions) (result *autoscalingv1.Scale, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(minersetsResource, "scale", c.ns, scale), &autoscalingv1.Scale{})

	if obj == nil {
		return nil, err
	}
	return obj.(*autoscalingv1.Scale), err
}

// ApplyScale takes top resource name and the apply declarative configuration for scale,
// applies it and returns the applied scale, and an error, if there is any.
func (c *FakeMinerSets) ApplyScale(ctx context.Context, minerSetName string, scale *applyconfigurationsautoscalingv1.ScaleApplyConfiguration, opts v1.ApplyOptions) (result *autoscalingv1.Scale, err error) {
	if scale == nil {
		return nil, fmt.Errorf("scale provided to ApplyScale must not be nil")
	}
	data, err := json.Marshal(scale)
	if err != nil {
		return nil, err
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(minersetsResource, c.ns, minerSetName, types.ApplyPatchType, data, "status"), &autoscalingv1.Scale{})

	if obj == nil {
		return nil, err
	}
	return obj.(*autoscalingv1.Scale), err
}
