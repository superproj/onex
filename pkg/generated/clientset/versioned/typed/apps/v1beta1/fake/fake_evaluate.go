// Copyright 2022 Lingfei Kong <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/superproj/onex.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1beta1 "github.com/superproj/onex/pkg/apis/apps/v1beta1"
	appsv1beta1 "github.com/superproj/onex/pkg/generated/applyconfigurations/apps/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeEvaluates implements EvaluateInterface
type FakeEvaluates struct {
	Fake *FakeAppsV1beta1
	ns   string
}

var evaluatesResource = v1beta1.SchemeGroupVersion.WithResource("evaluates")

var evaluatesKind = v1beta1.SchemeGroupVersion.WithKind("Evaluate")

// Get takes name of the evaluate, and returns the corresponding evaluate object, and an error if there is any.
func (c *FakeEvaluates) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.Evaluate, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(evaluatesResource, c.ns, name), &v1beta1.Evaluate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.Evaluate), err
}

// List takes label and field selectors, and returns the list of Evaluates that match those selectors.
func (c *FakeEvaluates) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.EvaluateList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(evaluatesResource, evaluatesKind, c.ns, opts), &v1beta1.EvaluateList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.EvaluateList{ListMeta: obj.(*v1beta1.EvaluateList).ListMeta}
	for _, item := range obj.(*v1beta1.EvaluateList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested evaluates.
func (c *FakeEvaluates) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(evaluatesResource, c.ns, opts))

}

// Create takes the representation of a evaluate and creates it.  Returns the server's representation of the evaluate, and an error, if there is any.
func (c *FakeEvaluates) Create(ctx context.Context, evaluate *v1beta1.Evaluate, opts v1.CreateOptions) (result *v1beta1.Evaluate, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(evaluatesResource, c.ns, evaluate), &v1beta1.Evaluate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.Evaluate), err
}

// Update takes the representation of a evaluate and updates it. Returns the server's representation of the evaluate, and an error, if there is any.
func (c *FakeEvaluates) Update(ctx context.Context, evaluate *v1beta1.Evaluate, opts v1.UpdateOptions) (result *v1beta1.Evaluate, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(evaluatesResource, c.ns, evaluate), &v1beta1.Evaluate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.Evaluate), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeEvaluates) UpdateStatus(ctx context.Context, evaluate *v1beta1.Evaluate, opts v1.UpdateOptions) (*v1beta1.Evaluate, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(evaluatesResource, "status", c.ns, evaluate), &v1beta1.Evaluate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.Evaluate), err
}

// Delete takes name of the evaluate and deletes it. Returns an error if one occurs.
func (c *FakeEvaluates) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(evaluatesResource, c.ns, name, opts), &v1beta1.Evaluate{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeEvaluates) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(evaluatesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.EvaluateList{})
	return err
}

// Patch applies the patch and returns the patched evaluate.
func (c *FakeEvaluates) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.Evaluate, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(evaluatesResource, c.ns, name, pt, data, subresources...), &v1beta1.Evaluate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.Evaluate), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied evaluate.
func (c *FakeEvaluates) Apply(ctx context.Context, evaluate *appsv1beta1.EvaluateApplyConfiguration, opts v1.ApplyOptions) (result *v1beta1.Evaluate, err error) {
	if evaluate == nil {
		return nil, fmt.Errorf("evaluate provided to Apply must not be nil")
	}
	data, err := json.Marshal(evaluate)
	if err != nil {
		return nil, err
	}
	name := evaluate.Name
	if name == nil {
		return nil, fmt.Errorf("evaluate.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(evaluatesResource, c.ns, *name, types.ApplyPatchType, data), &v1beta1.Evaluate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.Evaluate), err
}

// ApplyStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
func (c *FakeEvaluates) ApplyStatus(ctx context.Context, evaluate *appsv1beta1.EvaluateApplyConfiguration, opts v1.ApplyOptions) (result *v1beta1.Evaluate, err error) {
	if evaluate == nil {
		return nil, fmt.Errorf("evaluate provided to Apply must not be nil")
	}
	data, err := json.Marshal(evaluate)
	if err != nil {
		return nil, err
	}
	name := evaluate.Name
	if name == nil {
		return nil, fmt.Errorf("evaluate.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(evaluatesResource, c.ns, *name, types.ApplyPatchType, data, "status"), &v1beta1.Evaluate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.Evaluate), err
}
