// Copyright 2022 Lingfei Kong <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/superproj/onex.

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/superproj/onex/pkg/apis/apps/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ChainLister helps list Chains.
// All objects returned here must be treated as read-only.
type ChainLister interface {
	// List lists all Chains in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Chain, err error)
	// Chains returns an object that can list and get Chains.
	Chains(namespace string) ChainNamespaceLister
	ChainListerExpansion
}

// chainLister implements the ChainLister interface.
type chainLister struct {
	indexer cache.Indexer
}

// NewChainLister returns a new ChainLister.
func NewChainLister(indexer cache.Indexer) ChainLister {
	return &chainLister{indexer: indexer}
}

// List lists all Chains in the indexer.
func (s *chainLister) List(selector labels.Selector) (ret []*v1beta1.Chain, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Chain))
	})
	return ret, err
}

// Chains returns an object that can list and get Chains.
func (s *chainLister) Chains(namespace string) ChainNamespaceLister {
	return chainNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ChainNamespaceLister helps list and get Chains.
// All objects returned here must be treated as read-only.
type ChainNamespaceLister interface {
	// List lists all Chains in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Chain, err error)
	// Get retrieves the Chain from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.Chain, error)
	ChainNamespaceListerExpansion
}

// chainNamespaceLister implements the ChainNamespaceLister
// interface.
type chainNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Chains in the indexer for a given namespace.
func (s chainNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.Chain, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Chain))
	})
	return ret, err
}

// Get retrieves the Chain from the indexer for a given namespace and name.
func (s chainNamespaceLister) Get(name string) (*v1beta1.Chain, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("chain"), name)
	}
	return obj.(*v1beta1.Chain), nil
}
