// Copyright 2022 Lingfei Kong <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/superproj/onex.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// EvaluateTemplateSpecApplyConfiguration represents an declarative configuration of the EvaluateTemplateSpec type for use
// with apply.
type EvaluateTemplateSpecApplyConfiguration struct {
	*ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                          *EvaluateSpecApplyConfiguration `json:"spec,omitempty"`
}

// EvaluateTemplateSpecApplyConfiguration constructs an declarative configuration of the EvaluateTemplateSpec type for use with
// apply.
func EvaluateTemplateSpec() *EvaluateTemplateSpecApplyConfiguration {
	return &EvaluateTemplateSpecApplyConfiguration{}
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *EvaluateTemplateSpecApplyConfiguration) WithLabels(entries map[string]string) *EvaluateTemplateSpecApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *EvaluateTemplateSpecApplyConfiguration) WithAnnotations(entries map[string]string) *EvaluateTemplateSpecApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}

func (b *EvaluateTemplateSpecApplyConfiguration) ensureObjectMetaApplyConfigurationExists() {
	if b.ObjectMetaApplyConfiguration == nil {
		b.ObjectMetaApplyConfiguration = &ObjectMetaApplyConfiguration{}
	}
}

// WithSpec sets the Spec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Spec field is set to the value of the last call.
func (b *EvaluateTemplateSpecApplyConfiguration) WithSpec(value *EvaluateSpecApplyConfiguration) *EvaluateTemplateSpecApplyConfiguration {
	b.Spec = value
	return b
}
