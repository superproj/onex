// Copyright 2022 Lingfei Kong <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/superproj/onex.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	v1 "github.com/superproj/onex/pkg/generated/applyconfigurations/meta/v1"
)

// ModelCompareSpecApplyConfiguration represents an declarative configuration of the ModelCompareSpec type for use
// with apply.
type ModelCompareSpecApplyConfiguration struct {
	Selector    *v1.LabelSelectorApplyConfiguration     `json:"selector,omitempty"`
	Template    *EvaluateTemplateSpecApplyConfiguration `json:"template,omitempty"`
	DisplayName *string                                 `json:"displayName,omitempty"`
	ModelIDs    []int64                                 `json:"modelIDs,omitempty"`
}

// ModelCompareSpecApplyConfiguration constructs an declarative configuration of the ModelCompareSpec type for use with
// apply.
func ModelCompareSpec() *ModelCompareSpecApplyConfiguration {
	return &ModelCompareSpecApplyConfiguration{}
}

// WithSelector sets the Selector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Selector field is set to the value of the last call.
func (b *ModelCompareSpecApplyConfiguration) WithSelector(value *v1.LabelSelectorApplyConfiguration) *ModelCompareSpecApplyConfiguration {
	b.Selector = value
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *ModelCompareSpecApplyConfiguration) WithTemplate(value *EvaluateTemplateSpecApplyConfiguration) *ModelCompareSpecApplyConfiguration {
	b.Template = value
	return b
}

// WithDisplayName sets the DisplayName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DisplayName field is set to the value of the last call.
func (b *ModelCompareSpecApplyConfiguration) WithDisplayName(value string) *ModelCompareSpecApplyConfiguration {
	b.DisplayName = &value
	return b
}

// WithModelIDs adds the given value to the ModelIDs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ModelIDs field.
func (b *ModelCompareSpecApplyConfiguration) WithModelIDs(values ...int64) *ModelCompareSpecApplyConfiguration {
	for i := range values {
		b.ModelIDs = append(b.ModelIDs, values[i])
	}
	return b
}
